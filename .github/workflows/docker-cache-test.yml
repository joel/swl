name: Docker Cached Image Test CI

cache: &cache
  -
    name: Check out code
    id: checkout
    uses: actions/checkout@v2

  -
    name: Cache docker image
    id: cache-docker-image
    uses: actions/cache@v1
    with:
      path: ${{ env.IMAGE_CACHE_DIR }}
      key: ${{ runner.os }}-${{ env.IMAGE_CACHE_KEY }}-${{ matrix.ruby }}-${{ hashFiles('Dockerfile') }}
      restore-keys: |
        ${{ runner.os }}-${{ env.IMAGE_CACHE_KEY }}-${{ matrix.ruby }}-

  -
    name: Docker load
    id: docker-load
    if: steps.cache-docker-image.outputs.cache-hit == 'true'
    run: docker image load -i ${IMAGE_CACHE_DIR}/image.tar

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - 'LICENSE'

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  APP_IMAGE_TAG: swl-development:0.1.0
  APP_IMAGE_CACHE_TAG: swl-development-cache
  IMAGE_CACHE_DIR: /tmp/cache/docker-image
  IMAGE_CACHE_KEY: cache-image
  POSTGRES_PASSWORD: pg_password
  DB_HOST: db
  PG_FORWARDED_PORT: 5432
  REDIS_FORWARDED_PORT: 6379
  ARG_RUBY_VERSION: 3.0.0

jobs:
  image-cache-or-build:
    strategy:
      matrix:
        ruby: ["3.0.0"]
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    env:
      ARG_RUBY_VERSION: ${{ matrix.ruby }}

    steps:
    - name: Check out code
      id: checkout
      uses: actions/checkout@v2

    - name: Cache docker image
      id: cache-docker-image
      uses: actions/cache@v1
      with:
        path: ${{ env.IMAGE_CACHE_DIR }}
        key: ${{ runner.os }}-${{ env.IMAGE_CACHE_KEY }}-${{ matrix.ruby }}-${{ hashFiles('Dockerfile') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.IMAGE_CACHE_KEY }}-${{ matrix.ruby }}-

    - name: Docker load
      id: docker-load
      if: steps.cache-docker-image.outputs.cache-hit == 'true'
      run: docker image load -i ${IMAGE_CACHE_DIR}/image.tar

    - name: Docker build
      id: docker-build
      run: docker-compose build --build-arg BUILDKIT_INLINE_CACHE=1 base

    - name: Docker tag and save
      id: docker-tag-save
      if: steps.cache-docker-image.outputs.cache-hit != 'true'
      run: mkdir -p ${IMAGE_CACHE_DIR}
        && docker image tag ${APP_IMAGE_TAG} ${APP_IMAGE_CACHE_TAG}
        && docker image save -o ${IMAGE_CACHE_DIR}/image.tar ${APP_IMAGE_CACHE_TAG}


  test-app:
    needs: image-cache-or-build
    strategy:
      matrix:
        ruby: ["3.0.0"]
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    env:
      ARG_RUBY_VERSION: ${{ matrix.ruby }}
      GEMS_CACHE_DIR: /tmp/cache/bundle
      GEMS_CACHE_KEY: cache-gems

    steps:
    <<: *cache

    - name: Docker compose build
      id: docker-build
      run: docker-compose build --build-arg BUILDKIT_INLINE_CACHE=1 base

    - name: Wait middleware services
      id: wait-middleware
      run: docker-compose run --rm wait-middleware

    - name: Confirm docker-compose logs
      id: confirm-docker-compose-logs
      run: docker-compose logs db

    - name: Cache bundle gems
      id: cache-bundle-gems
      uses: actions/cache@v1
      with:
        path: ${{ env.GEMS_CACHE_DIR }}
        key: ${{ runner.os }}-${{ env.GEMS_CACHE_KEY }}-${{ matrix.ruby }}-${{ hashFiles('Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.GEMS_CACHE_KEY }}-${{ matrix.ruby }}-

    - name: Setup and Run test
      id: setup-and-run-test
      run: |
        docker-compose run --rm \
          -e DB_HOST=db \
          -e DB_PORT=5432 \
          -e REDIS_URL=redis://redis:6379/1 \
          -e DB_USERNAME=postgres \
          -e DB_PASSWORD=pg_password \
          console bash -c "bundle install && RAILS_ENV=test bin/rails assets:precompile && bin/rails db:prepare && bin/rails test"

  scan-image-by-trivy:
    needs: image-cache-or-build
    strategy:
      matrix:
        ruby: ["3.0.0"]
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    env:
      ARG_RUBY_VERSION: ${{ matrix.ruby }}
      TRIVY_CACHE_DIR: /tmp/cache/trivy

    steps:
    <<: *cache

    - name: Scan image
      id: scan-image
      run: docker container run
        --rm
        -v /var/run/docker.sock:/var/run/docker.sock
        -v ${TRIVY_CACHE_DIR}:/root/.cache/
        aquasec/trivy
        ${APP_IMAGE_CACHE_TAG}