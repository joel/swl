name: Docker Shared Image Test CI

on:
  push:
    branches:
      - 'main'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Build and export
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile.test
          tags: myimage:latest
          outputs: type=docker,dest=/tmp/myimage.tar
      -
        name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: myimage
          path: /tmp/myimage.tar

  use:
    runs-on: ubuntu-latest
    needs: build

    services:
      db:
        image: postgres:13.2-alpine
        env:
          POSTGRES_PASSWORD: pg_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:6.2.1-alpine3.13
        ports:
          - 6379:6379

    steps:

      -
        name: Update Container
        run: |
          sudo apt-get update

      -
        name: Verify PG connection from host
        run: |
          echo "DATABASE PORT: [${{ job.services.db.ports[5432] }}]"
          sudo apt install postgresql postgresql-contrib
          export PGPASSWORD=pg_password
          PGPASSWORD=pg_password psql --host 127.0.0.1 --port ${{ job.services.db.ports[5432] }} -U postgres --no-password -c 'CREATE DATABASE pam_test;'
          PGPASSWORD=pg_password psql --host 127.0.0.1 --port ${{ job.services.db.ports[5432] }} -U postgres --no-password pam_test -c <<< echo '\dt+'
          POSTGRES_CONTAINER=$(docker container ls | grep postgres | awk '{print $1}')
          echo "POSTGRES_CONTAINER: [${POSTGRES_CONTAINER}]"
          docker exec ${POSTGRES_CONTAINER} bash -c "psql -U postgres --no-password pam_test -c <<< echo '\l'"

      -
        name: Verify Redis connection from host
        run: |
          echo "REDIS PORT: [${{ job.services.redis.ports[6379] }}]"
          sudo apt install redis-server
          redis-cli -h 127.0.0.1 -p ${{ job.services.redis.ports[6379] }} <<< echo 'flushall'

      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      -
        name: Create Private Network
        run: docker network create swl-bridge-docker-network

      -
        name: Start PG
        run: |
          docker run --rm --detach \
            --name pg-db-service \
            --env POSTGRES_PASSWORD=postgres \
            --env POSTGRES_USER=postgres \
            --network swl-bridge-docker-network \
            postgres:13.2-alpine

      -
        name: Start Redis
        run: |
          docker run --rm --detach \
            --name redis-service \
            --network swl-bridge-docker-network \
            redis:6.2.1-alpine3.13

      -
        name: Check Containers on the Network
        run: docker network inspect swl-bridge-docker-network

      -
        name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: myimage
          path: /tmp
      -
        name: Load image
        run: |
          docker load --input /tmp/myimage.tar
          docker container ls -a
          docker image ls -a
          docker network ls
          docker volume ls
          pwd
          ls -ltr /home/runner/work
          ls -ltr /home/runner/work/_temp
          ls -ltr /home/runner/work/_actions
          ls -ltr /home/runner/work/swl
          ls -ltr /home/runner/work/swl/swl

      -
        name: Run Test From Docker Image
        run: |
          docker load --input /tmp/myimage.tar
          docker run --rm \
            --name myimage-app \
            --env DB_HOST=pg-db-service \
            --env DB_PORT=5432 \
            --env REDIS_URL=redis://redis-service:6379/1 \
            --network swl-bridge-docker-network \
            myimage:latest sh -c "bin/rails db:prepare && bin/rails test"
